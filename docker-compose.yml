version: '3'

services:
  # Database
    
  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # RabbitMQ standard port
      - "15672:15672" # RabbitMQ management console
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Atomic services
  drone:
    build:
      context: ./atomic/drone
    ports:
      - "5006:5006"
    environment:
      dbURL: postgresql://postgres.fnkjhzstrrrkcrsibpuy:Stinkyrat123!@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres

  customer:
    build:
      context: ./atomic/customer-service
    ports:
      - "5001:5001"
    environment:
      dbURL: postgresql://postgres.fnkjhzstrrrkcrsibpuy:Stinkyrat123!@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres

  item:
    build:
      context: ./atomic/item-service
    ports:
      - "5002:5002"
    environment:
      dbURL: postgresql://postgres.fnkjhzstrrrkcrsibpuy:Stinkyrat123!@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres

  store:
    build:
      context: ./atomic/store-service
    ports:
      - "5003:5003"
    environment:
      dbURL: postgresql://postgres.fnkjhzstrrrkcrsibpuy:Stinkyrat123!@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres

  order:
    build:
      context: ./atomic/order
    ports:
      - "5004:5004"
    environment:
      dbURL: postgresql://postgres.fnkjhzstrrrkcrsibpuy:Stinkyrat123!@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres

  scheduling:
    build:
      context: ./atomic/scheduling
    ports:
      - "5005:5005"
    environment:
      dbURL: postgresql://postgres.fnkjhzstrrrkcrsibpuy:Stinkyrat123!@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres

  notification:
    build:
      context: ./atomic/notification-service
    ports:
      - "5300:5300"
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_QUEUE: notification_queue
      EMAIL_ENABLED: "true"
      EMAIL_HOST: "smtp.mailersend.net"
      EMAIL_PORT: "587"
      EMAIL_USER: "${EMAIL_USER}"
      EMAIL_PASSWORD: "${EMAIL_PASSWORD}"
      EMAIL_FROM: "${EMAIL_FROM}"
      EMAIL_FROM_NAME: "Drone Delivery Service"
      MAILERSEND_API_KEY: "${MAILERSEND_API_KEY}"
      USE_MAILERSEND_API: "true"
    depends_on:
      - rabbitmq

  # # Composite services
  # placing-order:
  #   build:
  #     context: ./composite/placing-order
  #   ports:
  #     - "5500:5500" # Port for placing-order service
  #   environment:
  #     # Add environment variables needed by placing-order
  #     CUSTOMER_URL: "http://customer:5001"
  #     ITEM_URL: "http://item:5002"
  #     ORDER_URL: "http://order:5004"
  #     PROCESSING_ORDER_URL: "http://processing-order:5400"
  #     # PAYMENT_URL: "http://payment:500X" # Assuming a payment service exists or will be added
  #   depends_on:
  #     - customer
  #     - item
  #     - order
  #     - processing-order
  #     # - payment # Add dependency if payment service is used

  condition-check:
    build:
      context: ./composite/condition-check
    ports:
      - "5100:5100"
    environment:
      WEATHER_API_KEY: "${WEATHER_API_KEY}"
    depends_on:
      - drone
      - scheduling

  drone-navigation:
    build:
      context: ./composite/drone-navigation
    ports:
      - "5200:5200"
    depends_on:
      - condition-check
      
  # New Processing Order service
  processing-order:
    build:
      context: ./composite/processing-order
    ports:
      - "5400:5400"
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_QUEUE: notification_queue
    depends_on:
      - order
      - store
      - item
      - drone-navigation
      - rabbitmq
      - notification

  placing-order:
    build:
      context: ./composite/placing-order
    ports:
      - "5500:5500"
    environment:
      - CUSTOMER_SERVICE_URL=http://customer:5005/customer
      - ITEM_SERVICE_URL=http://item:5002/items
      - ORDER_SERVICE_URL=http://order:5010/order      
    depends_on:
      - customer
      - item
      - order
      - store
   


networks:
  default:
    name: my_app_network
    driver: bridge
    external: false